import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: "com.github.spotbugs"
apply plugin: "checkstyle"

group = "com.transferwise.kafka"

ext.artifactoryUser = project.hasProperty("artifactoryUser") ? project.artifactoryUser : System.env.ARTIFACTORY_USER as String
ext.artifactoryPassword = project.hasProperty("artifactoryPassword") ? project.artifactoryPassword : System.env.ARTIFACTORY_PASSWORD as String

repositories {
    maven {
        url 'https://arti.tw.ee/artifactory/libs-release'
    }
    mavenLocal()
}

apply from: "../build.libraries.gradle"

dependencies {
    annotationProcessor platform(libraries.springBootDependencies)
    implementation platform(libraries.springBootDependencies)
    compileOnly platform(libraries.springBootDependencies)
    testAnnotationProcessor platform(libraries.springBootDependencies)

    annotationProcessor libraries.lombok
    testAnnotationProcessor libraries.lombok

    implementation libraries.lombok

    compileOnly libraries.spotbugsAnnotations
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    // Flyway requires Vx__ class name, which ofc conflicts with all sensible rules.
    exclude "db/migration/**"

    maxWarnings = 0

    reports {
        xml.enabled false
        html.enabled true
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

test {
    useJUnitPlatform()
    jvmArgs("-Xmx1g")
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"

    excludeFilter = file('../spotbugs-exclude.xml')

    reports {
        xml.enabled false
        html.enabled true
    }
}

clean.doFirst {
    delete "out"
}

yamlValidator {
    searchPaths = ['src']
    allowDuplicates = false
    searchRecursive = true
}