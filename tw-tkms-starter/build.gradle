plugins {
    id 'java-library'
    id 'idea'
    id "com.google.protobuf"
    id "maven-publish"
    id "docker-compose"
}

apply from: "../build.common.gradle"

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.0.1'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework:spring-jdbc'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'com.google.guava:guava:28.2-jre'
    implementation 'com.google.protobuf:protobuf-java:3.11.4'
    implementation 'com.transferwise.common:tw-graceful-shutdown-interfaces:1.3.2'
    implementation 'com.transferwise.common:tw-base-utils:1.2.8'
    implementation 'com.transferwise.common:tw-leader-selector:1.1.2'
    implementation 'org.apache.curator:curator-recipes:4.2.0'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'io.micrometer:micrometer-core'
    implementation 'com.transferwise.common:tw-context:0.2.0'

    runtimeOnly 'com.transferwise.common:tw-graceful-shutdown:1.2.4'
    implementation 'com.transferwise.common:tw-context-starter:0.2.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-jdbc'
    testImplementation 'org.projectlombok:lombok'
    testImplementation 'org.awaitility:awaitility:4.0.2'
    testImplementation 'org.flywaydb:flyway-core'

    testRuntimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    testRuntimeOnly 'org.postgresql:postgresql'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.11.4'
    }
}

dockerCompose.isRequiredBy(test)

ServerSocket ss = new ServerSocket(0);
def freePort = ss.getLocalPort();
ss.close();

dockerCompose {
    useComposeFiles = ["src/test/resources/docker-compose.yml"]
    // Create some flakiness on slower comps
    // waitForTcpPorts = false

    // Set to true if you have anomalies
    stopContainers = false
    removeContainers = false

    environment.put "KAFKA_RANDOM_PORT", "${freePort}"
}

test {
    useJUnitPlatform()
    doFirst {
        dockerCompose.exposeAsEnvironment(test)
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                packaging = "jar"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0, Copyright 2019 TransferWise Ltd'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url "https://arti.tw.ee/artifactory/libs-${project.version.endsWith('-SNAPSHOT') ? 'snapshot' : 'release'}-local"
            credentials {
                username = artifactoryUser
                password = artifactoryPassword
            }
        }
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"
    classes = classes.filter {
        !it.path.contains("stored_message")
    }

    reports {
        xml.enabled false
        html.enabled true
    }
}

task addTag(type: Exec) {
    commandLine 'git', 'tag', "$project.name-$project.version", '-m', "$project.name-$project.version"
}
task pushTag(type: Exec) {
    commandLine 'git', 'push', 'origin', "$project.name-$project.version"
}

pushTag.dependsOn addTag