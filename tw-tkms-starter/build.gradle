plugins {
    id 'java-library'
    id 'idea'
    id "com.google.protobuf"
    id "docker-compose"
}

ext.projectName = "tw-tkms-starter"
ext.projectDescription = "tw-tkms-starter"
ext.projectArtifactName = "tw-tkms-starter"

apply from: "../build.common.gradle"
apply from: "../build.library.gradle"

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotBugsAnnotationsVersion}"

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.springframework:spring-jdbc'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'com.google.guava:guava:30.0-jre'
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation 'com.transferwise.common:tw-graceful-shutdown-interfaces:1.3.2'
    implementation "com.transferwise.common:tw-base-utils:${twBaseUtilsVersion}"
    implementation "com.transferwise.common:tw-leader-selector:${twLeaderSelectorVersion}"
    implementation "org.apache.curator:curator-recipes:${curatorVersion}"
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'io.micrometer:micrometer-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.transferwise.common:tw-context:0.6.1'
    implementation 'io.airlift:aircompressor:0.16' // TODO: Replace with just pure common-compress
    implementation 'org.apache.commons:commons-compress:1.20'

    runtimeOnly 'com.transferwise.common:tw-graceful-shutdown:1.2.9'
    runtimeOnly "com.transferwise.common:tw-leader-selector-starter:${twLeaderSelectorVersion}"

    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotBugsAnnotationsVersion}"
    
    testImplementation project(":tw-tkms-test-starter")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-jdbc'
    testImplementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.projectlombok:lombok'
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation 'org.flywaydb:flyway-core'
    testImplementation 'org.springframework.kafka:spring-kafka'

    testRuntimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    testRuntimeOnly 'org.postgresql:postgresql'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
}

if (System.getenv("IN_CIRCLE") != "true") {
    dockerCompose.isRequiredBy(test)
}

ServerSocket ss = new ServerSocket(0);
def freePort = ss.getLocalPort();
ss.close();

dockerCompose {
    useComposeFiles = ["src/test/resources/docker-compose.yml"]
    // Create some flakiness on slower comps
    // waitForTcpPorts = false

    // Set to true if you have anomalies
    stopContainers = false
    removeContainers = false

    environment.put "KAFKA_RANDOM_PORT", "${freePort}"
}

test {
    doFirst {
        dockerCompose.exposeAsEnvironment(test)
    }
}
